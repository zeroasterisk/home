"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Alan Blount
" https://github.com/zeroasterisk/home

" ----------------------------------------------------------------------------
" Neovim config, split into multiple files
" ----------------------------------------------------------------------------

" Load plugins first
source ~/dotfiles/vim/plugins.vim

" Load general settings
source ~/dotfiles/vim/options.vim

" Load key mappings
source ~/dotfiles/vim/mappings.vim

" Load plugin-specific settings
source ~/dotfiles/vim/plugin_config.vim

" ----------------------------------------------------------------------------
" ABBREVATIONS
" ----------------------------------------------------------------------------

" Typing `$c` on the command line expands to `:e` + the current path, so it's easy to edit a file in
" the same directory as the current file.
cnoremap $c e <C-\>eCurrentFileDir()<CR>
function! CurrentFileDir()
   return "e " . expand("%:p:h") . "/"
endfunction

" I can't spell :(
abbr conosle console
abbr comopnent component

" Debugging helpers
autocmd BufEnter *.py iabbr xxx print('XXX
autocmd BufEnter *.py iabbr yyy print('YYY
autocmd BufEnter *.py iabbr zzz print('ZZZ
autocmd BufEnter *.coffee iabbr xxx console.log 'XXX',
autocmd BufEnter *.coffee iabbr yyy console.log 'YYY',
autocmd BufEnter *.coffee iabbr zzz console.log 'ZZZ',
autocmd BufEnter *.js iabbr xxx console.log('XXX',
autocmd BufEnter *.js iabbr yyy console.log('YYY',
autocmd BufEnter *.js iabbr zzz console.log('ZZZ',
autocmd BufEnter *.rb iabbr xxx puts "XXX
autocmd BufEnter *.rb iabbr yyy puts "YYY
autocmd BufEnter *.rb iabbr zzz puts "ZZZ
autocmd BufEnter *.rb iabbr ppp require 'pp'; pp

" ----------------------------------------------------------------------------
" CUSTOM COMMANDS AND FUNCTIONS
" ----------------------------------------------------------------------------

" I always hit ":W" instead of ":w" because I linger on the shift key...
command! Q q
command! W w

" Trim spaces at EOL and retab. I run `:CLEAN` a lot to clean up files.
command! TEOL %s/\s\+$//
command! CLEAN retab | TEOL

" Close all buffers except this one
command! BufCloseOthers %bd|e#

" ----------------------------------------------------------------------------
" COLORS
" ----------------------------------------------------------------------------

" Customize the color theme/scheme
"   and voodoo needed to make things look good in a terminal
set background=dark
set termguicolors
let g:rehash256 = 1 " Something to do with Molokai?
let g:gruvbox_italic=1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
" colorscheme molokai
colorscheme gruvbox

" if !has('gui_running')
"   let g:solarized_termcolors=256
"   if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
"     set t_Co=256
"   elseif has("terminfo")
"     colorscheme default
"     set t_Co=8
"     set t_Sf= [3%p1%dm
"     set t_Sb= [4%p1%dm
"   else
"     colorscheme default
"     set t_Co=8
"     set t_Sf= [3%dm
"     set t_Sb= [4%dm
"   endif
"   " Disable Background Color Erase when within tmux - https://stackoverflow.com/q/6427650/102704
"   if $TMUX != ""
"     set t_ut=
"   endif
" endif
syntax on

" COLOR TWEAKS FOR MOLOKAI <-- disabled
" Window splits & ruler are too bright, so change to white on grey (non-GUI)
" highlight StatusLine       cterm=NONE ctermbg=blue ctermfg=white
" highlight StatusLineTerm   cterm=NONE ctermbg=blue ctermfg=white
" highlight StatusLineNC     cterm=NONE ctermbg=black ctermfg=white
" highlight StatusLineTermNC cterm=NONE ctermbg=black ctermfg=white
" highlight VertSplit        cterm=NONE ctermbg=black ctermfg=white

" taglist.vim's filenames is linked to LineNr by default, which is too dark
highlight def link MyTagListFileName Statement
highlight def link MyTagListTagName Question

" Turn off horrible coloring for CDATA in XML
highlight def link xmlCdata NONE

" Some custom spell-checking colors
" highlight SpellBad     term=underline cterm=underline ctermbg=NONE ctermfg=205
" highlight SpellCap     term=underline cterm=underline ctermbg=NONE ctermfg=33
" highlight SpellRare    term=underline cterm=underline ctermbg=NONE ctermfg=217
" highlight SpellLocal   term=underline cterm=underline ctermbg=NONE ctermfg=72

" The Ignore color should be... ignorable
" silent! highlight Ignore cterm=bold ctermfg=black ctermbg=bg
" highlight clear FoldColumn
" highlight def link FoldColumn Ignore
" highlight clear Folded
" highlight link Folded Ignore
" highlight clear LineNr
" highlight! def link LineNr Ignore

" Custom search colors
" highlight clear Search
" highlight Search term=NONE cterm=NONE ctermfg=white ctermbg=black

" Make hilighted matching parents less annoying
" highlight clear MatchParen
" highlight link MatchParen Search

" Custom colors for NERDTree
" highlight def link NERDTreeRO NERDTreeFile

" Make trailing spaces very visible
highlight SpecialKey ctermbg=Yellow guibg=Yellow

" Make menu selections visible
highlight PmenuSel ctermfg=black ctermbg=magenta

" The sign column slows down remote terminals
highlight clear SignColumn
highlight link SignColumn Ignore

" Markdown could be more fruit salady
highlight link markdownH1 PreProc
highlight link markdownH2 PreProc
highlight link markdownLink Character
highlight link markdownBold String
highlight link markdownItalic Statement
highlight link markdownCode Delimiter
highlight link markdownCodeBlock Delimiter


" Custom mode for distraction-free editing
function! ProseMode()
  call goyo#execute(0, [])
  set spell noci nosi noai nolist noshowmode noshowcmd
  set complete+=s
  set bg=light
  colors solarized
endfunction
command! ProseMode call ProseMode()

" ----------------------------------------------------------------------------
" FILE TYPE TRIGGERS
" ----------------------------------------------------------------------------

" Reset all autocommands
augroup vimrc
autocmd!

au BufNewFile,BufRead *.cson    set ft=coffee
au BufNewFile,BufRead *.glsl    setf glsl
au BufNewFile,BufRead *.gyp     set ft=python
au BufNewFile,BufRead *.html    setlocal nocindent smartindent
au BufNewFile,BufRead *.i7x     setf inform7
au BufNewFile,BufRead *.ini     setf conf
au BufNewFile,BufRead *.input   setf gnuplot
au BufNewFile,BufRead *.json    set ft=json tw=0
au BufNewFile,BufRead *.less    setlocal ft=less nocindent smartindent
au BufNewFile,BufRead *.md      setlocal ft=markdown nolist spell
au BufNewFile,BufRead *.md,*.markdown setlocal foldlevel=999 tw=0 nocin
au BufNewFile,BufRead *.ni      setlocal ft=inform nolist ts=2 sw=2 noet
au BufNewFile,BufRead *.plist   setf xml
au BufNewFile,BufRead *.rb      setlocal noai
au BufNewFile,BufRead *.rxml    setf ruby
au BufNewFile,BufRead *.sass    setf sass
au BufNewFile,BufRead *.ttml    setf xml
au BufNewFile,BufRead *.vert,*.frag set ft=glsl
au BufNewFile,BufRead *.xml     setlocal ft=xml  ts=2 sw=2 et
au BufNewFile,BufRead *.zone    setlocal nolist ts=4 sw=4 noet
au BufNewFile,BufRead *.zsh     setf zsh
au BufNewFile,BufRead *templates/*.html setf htmldjango
au BufNewFile,BufRead .git/config setlocal ft=gitconfig nolist ts=4 sw=4 noet
au BufNewFile,BufRead .gitconfig* setlocal ft=gitconfig nolist ts=4 sw=4 noet
au BufNewFile,BufRead .vimlocal,.gvimlocal setf vim
au BufNewFile,BufRead .zshlocal setf zsh
au BufNewFile,BufRead /tmp/crontab* setf crontab
au BufNewFile,BufRead COMMIT_EDITMSG setlocal nolist nonumber
au BufNewFile,BufRead Makefile setlocal nolist

au FileType gitcommit setlocal nolist ts=4 sts=4 sw=4 noet
au FileType inform7 setlocal nolist tw=0 ts=4 sw=4 noet foldlevel=999
au FileType json setlocal conceallevel=0 foldmethod=syntax foldlevel=999
au FileType make setlocal nolist ts=4 sts=4 sw=4 noet
au FileType markdown syn sync fromstart
au Filetype gitcommit setlocal tw=80

augroup END

" strip trailing spaces on save
autocmd BufWritePre * :%s/\s\+$//e

" ----------------------------------------------------------------------------
" HOST-SPECIFIC VIM FILE
" ----------------------------------------------------------------------------

" Function to source only if file exists {
function! SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction
" }

" Now load specifics to this host
call SourceIfExists("~/.vimrc.local")
call SourceIfExists("~/.vimrc.colors")
call SourceIfExists("~/.vimlocal")
if has('gui_running')
  call SourceIfExists("~/.gvimrc.local")
endif

" Some plugin seems to search for something at startup, so this fixes that.
silent! nohlsearch

" vim:set tw=100: